// TODO: Create a "proper" plugin.
project.extensions.create("aspectj", AspectJPluginExtension)

class AspectJPluginExtension {
	// TODO: Figure out how to set this one in a build script.
	//ExternalDependency ajc

	FileCollection aspects
	FileCollection ajInpath
	FileCollection ajSourceDirectories

	// TODO: For some reason, adding any excludes will exclude everything...
	String ajIncludes = ""
	String ajExcludes = ""
}

configurations {
	ajc
}

private def getAspectPaths() {
	String aspectPaths = ""
	if (aspectj.aspects != null) {
		aspectPaths = aspectj.aspects.asPath
	}

	return aspectPaths;
}

private def getInPaths() {
	String inPaths = ""
	if (aspectj.ajInpath != null) {
		inPaths = aspectj.ajInpath.asPath
	}

	return inPaths;
}

private def getAndroidSourceSets(variantName) {
	def mainName = "main"
	def targetName = mainName;
	def projectFlavorNames = project.("android").productFlavors.collect { it.name }
	projectFlavorNames = projectFlavorNames.size() != 0 ? projectFlavorNames : [""]

	for (flavorName in projectFlavorNames) {
		variantName = variantName.toLowerCase()
		if (variantName.contains(flavorName)) {
			targetName = flavorName;
		}
	}

	def sourceSets = new ArrayList<String>()
	sourceSets.add(targetName)

	if (!targetName.equals(mainName)) {
		sourceSets.add(mainName)
	}

	return sourceSets
}

task compileJava(dependsOn: JavaPlugin.PROCESS_RESOURCES_TASK_NAME, overwrite: true)  {
	dependsOn configurations.ajc.getTaskDependencyFromProjectDependency(true, "compileJava")

	doLast{
		ant.taskdef( resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.ajc.asPath)
		ant.iajc(
				source: sourceCompatibility,
				target: targetCompatibility,
				destDir: sourceSets.main.output.classesDir.absolutePath,
				maxmem: "512m",
				fork: "true",
				aspectPath: getAspectPaths(),
				inpath: getInPaths(),
				classpath: configurations.compile.asPath,
				includes: aspectj.ajIncludes,
				excludes: aspectj.ajExcludes,
		){
			srcdir {
				sourceSets.main.java.srcDirs.each{
					pathelement(location:it.absolutePath)
				}
			}
		}
	}
}

task compileTestJava(dependsOn: JavaPlugin.PROCESS_TEST_RESOURCES_TASK_NAME, overwrite: true)  {
	dependsOn configurations.ajc.getTaskDependencyFromProjectDependency(true, "compileTestJava")

	doLast{
		ant.taskdef( resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.ajc.asPath)
		ant.iajc(
				source: sourceCompatibility,
				target: targetCompatibility,
				destDir: sourceSets.main.output.classesDir.absolutePath,
				maxmem: "512m",
				fork: "true", 
				aspectPath: getAspectPaths(),
				inpath: getInPaths(),
				classpath: configurations.compile.asPath,
				includes: aspectj.ajIncludes,
				excludes: aspectj.ajExcludes,
		){
			srcdir {
				sourceSets.main.java.srcDirs.each{
					pathelement(location:it.absolutePath)
				}
			}
		}
	}
}

// Only enable when the Android plugin is used.
if (hasProperty("android")) {
	def variants;

	if (android.hasProperty("applicationVariants")) {
		variants = android.applicationVariants;
	}

	if (android.hasProperty("libraryVariants")) {
		variants = android.libraryVariants;
	}

	// Taken from http://stackoverflow.com/a/19307427
	variants.all { variant ->

		variant.javaCompile.doLast {
			def androidSdk = android.adbExe.parent + "/../platforms/" + android.compileSdkVersion + "/android.jar"

			def iajcClasspath = androidSdk
			configurations.compile.each { File file ->
				// Exclude any AAR files, Java compilers don't understand them.
				def fileName = file.getName()
				if (fileName == null || !fileName.endsWith(".aar")) {
					iajcClasspath += ";" + file.getAbsolutePath()
				}
			}

			configurations.compile.dependencies.each { dep ->
				if(dep.hasProperty("dependencyProject")) {
					iajcClasspath += ";" + dep.dependencyProject.buildDir + "/intermediates/bundles/release/classes.jar"
				}
			}

			// Add exploded AAR files.
			def aarTree = fileTree(dir: "${project.buildDir}/intermediates/exploded-aar", include: "**/classes.jar")
			aarTree.each { jarFile ->
				iajcClasspath += ";" + jarFile
			}

			ant.taskdef( resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.ajc.asPath)
			ant.iajc (
					source: sourceCompatibility,
					target: targetCompatibility,
					destDir: "${project.buildDir}/intermediates/classes/${variant.dirName}",
					maxmem: "512m",
					fork: "true",
					aspectPath: getAspectPaths(),
					inpath: getInPaths(),
					classpath: iajcClasspath,
					includes: aspectj.ajIncludes,
					excludes: aspectj.ajExcludes,
			){
				srcdir {
					for (source in getAndroidSourceSets(variant.name)) {
						android.sourceSets[source].java.srcDirs.each { File file ->
							if (file.exists()) {
								pathelement(location:file.absolutePath)
							}
						}
					}
					// Looping over "sourceSets.main.java.srcDirs.each" seems to include some
					// false folders when using a non-standard folder structure.
					// For this reason you need to set "ajSourceDirectories" in your dependencies.
					aspectj.ajSourceDirectories.each { File file ->
						pathelement(location:file.absolutePath)
					}
					// R class
					pathelement(location:"${project.buildDir}/generated/source/r/${variant.dirName}")
					// BuildConfig class
					pathelement(location:"${project.buildDir}/generated/source/buildConfig/${variant.dirName}")
				}
			}
		}
	}
}
